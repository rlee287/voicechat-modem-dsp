# Type stub for encoders.encode_pad (Python 3)

from .bitstream import read_bitstream_iterator, readable_bytearr, writeable_bytearr, write_bitstream
from typing import Any, List, Dict, Callable

def base_2_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_2_decode(datastream: List[float]) -> readable_bytearr: ...
def base_4_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_4_decode(datastream: List[float]) -> readable_bytearr: ...
def base_8_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_8_decode(datastream: List[float]) -> readable_bytearr: ...
def base_16_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_16_decode(datastream: List[float]) -> readable_bytearr: ...
def base_32_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_32_decode(datastream: List[float]) -> readable_bytearr: ...
def base_64_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_64_decode(datastream: List[float]) -> readable_bytearr: ...
def base_256_encode(bitstream: readable_bytearr) -> List[float]: ...
def base_256_decode(datastream: List[float]) -> readable_bytearr: ...
def make_pad_array(datastream: List[float], pad_len: int): ...
def unpad_array(datastream: List[float]): ...

encode_function_mappings: Dict[int,Callable[[readable_bytearr], List[float]]]
decode_function_mappings: Dict[int,Callable[[List[float]], readable_bytearr]]
